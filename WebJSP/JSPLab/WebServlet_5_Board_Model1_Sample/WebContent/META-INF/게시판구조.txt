1. 현재 프로젝트 게시판 만들기 연습(Model1 방식으로)
1.1 [JSP] 가 [클라이언트] 요청을 받고 흐름을 제어

단 ) Model1 > DTO, DAO 사용

단 ) Servlet 사용하지 않아요.

1.2
	<form action="loginok.jsp" 코딩....
	
1.3 Model2 기반 MVC
	[servlet] 가 [틀라이언트] 요청을 받고 흐름을 제어
	
	<form action="Memolist" 코딩....
------------------------------------------------------------	
게시판 만들기

1. DB설계(Table 만들기)
1.1 요구사항 파악
- 게시판 종류
-- 일반게시판 (답글X) : 공지사항
-- 계층형게시판(답글O)
-- 일반게시판,계층형게시판 >> 댓글O (옵션) : 비동기(기능적요구사항)

게시판(일반,계층형)
--회원전용
--비회원 : 비번필수

일반게시판 : 회원전용 (로그인 한 사용자(권한처리 : session))
일반게시판 : 비회원(비번처리 필수 : 수정,삭제 권한처리)

계층형게시판 : 회원전용 (로그인 한 사용자(권한처리 : session))
계층형게시판 : 비회원 (비번처리 필수 : 수정,삭제 권한처리)

-----------------------------------------------------------
테이블 설계
(비인증형 게시판)
create table board(
	idx number constraint pk_board_idx primary key,
		--글번호(오라클 : sequence 객체 / ms,mysql : 테이블에 종속적인 방법으로...자동증가)
	writer varchar2(30) not null,
		--작성자 필수입력사항 : 직접입력받아야함 (회원전용에서는 로그인 한 ID : session)
	pwd varchar2(30) not null,
		--비밀번호 필수입력사항 : 직접입력받아야함 (회원전용에서는 비번 X)
	subject varchar2(50) not null,
		--제목
	content varchar2(2000) not null,
		--글내용
	writedate date default SYSDATE,
		--작성일 (DB서버날짜 기본값 설정)
	readnum number default 0,
		--조회수 (기본값 0), 업무로직구현
	filename varchar2(50),
		--파일명 또는 파일경로
	homepage varchar2(20),
		--홈페이지 주소.. 옵션
	email varchar2(20)
		--옵션..(마케팅활용 등...)
);

-----------------------------------------------------------
테이블 설계
(계층형 게시판)
create table multiboard(
	idx number constraint pk_board_idx primary key,
		--글번호(오라클 : sequence 객체 / ms,mysql : 테이블에 종속적인 방법으로...자동증가)
	writer varchar2(30) not null,
		--작성자 회원전용에서는 로그인 한 ID : session
	subject varchar2(50) not null,
		--제목
	content varchar2(2000) not null,
		--글내용
	writedate date default SYSDATE,
		--작성일 (DB서버날짜 기본값 설정)
	readnum number default 0,
		--조회수 (기본값 0), 업무로직구현
	filename varchar2(50),
		--파일명 또는 파일경로
	homepage varchar2(20),
		--홈페이지 주소.. 옵션
	email varchar2(20)
		--옵션..(마케팅활용 등...)
		
	--추가적인 컬럼
	refer number default 0, --참조글 or 글의 그룹번호
	depth number default 0, --글의 깊이(들여쓰기 - 화면처리목적) 로직X
	step number default 0, --글의 정렬 순서, 답글 정렬
);

idx, ref, depth, step, title
 1	  1		0	  0		원본글1
 2	  2		0	  0		원본글2
 
 3	  1		1	  1		원본글1의 답글1
 
 4	  2		1	  1		원본글2의 답글1
 
 5	  1		2	  3		원본글1의 답글1의 답글1(idx 3의 답글1)
 6 	  1		2	  2		원본글1의 답글1의 답글2(idx 3의 답글2)
 
 
order by ref desc, step asc; >> 최신 답글이 위로 오게...
idx, ref, depth, step, title
 2	  2		0	  0		원본글2
 4	  2		1	  1		>원본글2의 답글1
 1	  1		0	  0		원본글1
 3	  1		1	  1		>원본글1의 답글1
 7	  1		2	  2		>>원본글1의 답글1의 답글3(idx 3의 답글3)
 6 	  1		2	  3		>>원본글1의 답글1의 답글2(idx 3의 답글2)
 5	  1		2	  4		>>원본글1의 답글1의 답글1(idx 3의 답글1)
-------------------------------------------------------------------
일반게시판 select * from board order by idx desc; (최신글 위로 정렬)

계층형게시판
논리 2가지

1. 최신 답글 위로
	규칙 : 원본글 : depth, step >> 0 0
		같은 ref에서 현재 읽은 글의 step 값 보다 더 큰 step 이 있다면 +1
		     답글 : depth+1, step+1

select * from multiboard order ref desc, step asc;
		     
2. 답글 순서로 정렬
select * from multiboard order ref desc, step desc;

-------------------------------------------------------------------
select * from multiboard order by ref desc , step asc
update multiboard set step= step+1 where refer =? and step > ? 

pstmt.setInt(9, depth+1); // 규칙 현재 읽은 글에 depth + 1
pstmt.setInt(10, step+1); // 순서 update 통해서  자리 확보 + 1				    		   
-------------------------------------------------------------------
select * from multiboard order by ref desc, step desc
update multiboard set step=step+1 where refer=? and step >= ?

-------------------------------------------------------------------
순번처리(oracle)
create sequence board_idx
start with 1
increment by 1
-------------------------------------------------------------------
댓글 테이블 생성
--누구의 댓글인가
--일반게시판 글번호 필요

create table reply(
	no number primary key,
	writer varchar2(30),
	pwd varchar2(30),
	content varchar2(2000),
	writedate date default sysdate,
	idx number not null
);

alter table reply
add constraint fk_reply_deptno foreign key(idx) references board(idx);

board 원본글
10, 방가방가, .....

1번글 읽고 댓글 >> reply >> insert
insert into reply(no, ...idx) values(1, .....10)

reply 댓글
1, 나도방가, ... 10
2, 방가, .... 10

----
board 10 read 하면 reply에서 데이터....
select * from reply where idx=10;
-----------------------------------------------

개발(목적 : 게시판 흐름을 이해 : JSP)
Model1 방식의 개발
> 요청을 JSP 처리 > Model(DTO, DAO) > 요청 <form action="ok.jsp"
								<a href='board_write.jsp'>
Model2 방식의 개발
> 요청을 servlet 처리 > Model(DTO, DAO) > 요청 <form action="ok.do"
										<a href='write.do'>
----------------------------------------------------------------
요청을 받고 화면처리 = JSP
WebContent > login.jsp, loginok.jsp..... (Model1 설계)
WebContent > WEB-INF > views > login.jsp, loginok.jsp (Model2 설계)

WebContent > 폴더구조
>board > list.jsp, write.jsp > images 폴더 > ..... >css폴더
>member > memberlist.jsp , memberwrite.jsp > images폴더 >... >css폴더
>images > 공통이미지
>css > common.css
>js > common.js
>include > top.jsp, bottom.jsp

서비스, 데이터처리 = JAVA(Model)
	kr.or.bit.dto > 데이터 1건을 담을 수 있는 클래스
	kr.or.bit.dao > DB연결 CRUD 함수
	kr.or.bit.service > 
	kr.or.bit.utils 추가(문자,날짜,페이징,DB ...처리 등)

-------------------------------------------------------------------
배포(조원들에 배포...)
--------------------------------------------------------------------
글쓰기, 글읽기, 답글, 댓글, .......

**단일업무 하나당 jsp 2개**
**화면단(jsp) + 로직처리(jsp)**
**login.jsp + loginok.jsp**

1. board_write.jsp : 글쓰기 (UI -> Form(input) -> submit(유효성검증)
주의사항 : <input name="" .... 서버에 데이터 받기 가능(name 속성이 꼭 있어야 한다)
주의사항 : action="처리하는 페이지.jsp"

2. board_writeok.jsp : 글쓰기처리 (한글처리 > 데이터받기 > DB 연결 > insert >처리(성공) > 목록이동(list)\
주의사항 : insert 실패처리 (DB not null >> insert...), 중복값(sequences), 타입크기-글자수제한..(고민)
	[ DB 연결 > insert >처리(성공) ]여기까지는 service에게 위임
 
Model(dto, dao, service)
JSP는 dao 직접 관리하지 않는다. jsp는 service만 관리한다.
jsp dao 객체를 생성하지 않는다. service가 생성..

board_writeOk.jsp
DTO > class Message {private String title;}
JSP > Message message = new Massage();
jsp > message.setTitle(request.getParameter("title");...
boardservice service = boardservice.getInstance();
int result = service.writeOk(message);
>> boardservice >> public int writeOk(Message m){ Dao dao = new Dao(); dao.writeok(m);}

board_write.jsp >> board_writeok.jsp -> 데이터 받기 -> DTO 생성 -> DTO 데이터 넣기   >> Service 객체 -> BoardDao 객체 -> Service 객체 >> board_writeok.jsp -> list,write 이동처리
 
------------------------------------------------------------------------------------------------

board_list.jsp : 게시물 목록 보여주기
화면에 출력 : 글번호, 제목, 작성자, 날짜, 조회수
글의 내용은 보여주지 않음(상세보기)

SELECT 글번호, 제목, 작성자, 날짜, 조회수 FROM jspboard ORDER BY refer DESC , step ASC;

board_list.jsp요청 >> service 객체 -> Dao 객체 -> 함수return List<Board> -> service 객체 >> board_list.jsp <c:foreach var="board" items="<%=list%> 화면출력

주의사항
1. 링크구현 : 제목링크처리 시 pg, cp, idx parameter 구현 (GET 방식)
2. 페이징처리 (The pager)
3. EL & JSTL( 제어문)

-------------------------------------------------------------------------------------------------------------------------------

board_content.jsp
글 번호 받기idx -> : select ...where idx=10 : 고정된 화면 출력
-> 목록, 수정, 삭제(링크 구성) , 댓글....
-> board_list.jsp?ps = & cp =
-> board_edit?idx=1
-> board_delete?idx=1

기능추가 : 글 조회수 증가(update... readnum = readnum+1...)
	조건 : 같은 계정, 같은 날짜, ......조회수 증가 제한사항
--------------------------------------------------------

board_delete.jsp 삭제하기
-> board_delete?idx=1 -> delete .... where idx=1

삭제하기 (회원, 비회원)
	회원 : 상세보기로 갔을때 로그인 한 id와 글쓴 id가 일치하지 않으면 삭제,수정 버튼이 보이지 않음.
	비회원 : 화면UI -> 비밀번호 입력,확일치 시 삭제
	-> board_delete.jsp (UI : 비밀번호 입력)
	-> board_deleteok.jsp (삭제 처리)
	-> 삭제(idx, pwd)
		delete from jspboard where idx=? and pwd=?
	-> 삭제 후 list 로 이동....
	
-----------------------------------------------------------------------