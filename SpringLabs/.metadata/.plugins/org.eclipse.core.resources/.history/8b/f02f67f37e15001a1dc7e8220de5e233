[DI 개념]_1 : 의존성 주입(의존 객체 주입)
프로젝트 -> 수 많은 클래스 생성 -> 클래스 들의 서로간의 관계
1. 상속(is ~a)
2. 포함(has ~a)

A라는 클래스는 B라는 클래스가 필요하다

class A extends B{} //상속

class A {
	B b = new B(); //포함 (복합연관)
}

class A {
	B b;
	A (B b){ //의존을 생성자를 통해서...(주소값 받기)(집합연관)
		this.b = b;
	}
}

class A{
	public B print(B b){ //의존을 함수를 통해서...(주소값 받기)(의존)
		return b;
	}
}


- NewRecordView 클래스가  NewRecord에 의존한다.
- NewRecordView 클래스가 필요한 객체를 [생성자] 통해서 주입
- 두 객제의 lifecycle은 같다(복합연관)
* 오류 : DI는 Spring 에서만 존재하는 개념(X)

result : 필요하신 객체는[생성자] 통해서 주입( 또는 생성) 사용가능  -> 의존관계(복합연관)
------------------------------------------------------------------------

[DI_개념]_2 : 의존성 주입(의존 객체 주입)
- NewRecordView 클래스는 필요한 객체를 setter 함수를 통해서 주입받아서 사용하고 있다.
- 객체의 생성이 서로 독립적이다 > 필요시에 객체를 주입
- 두 객체의 lifecycle 은 같지 않다 > 의존 > 집합연관

------------------------------------------------------------------------
시나리오
Class A, Class B


